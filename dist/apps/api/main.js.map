{"version":3,"file":"main.js","mappings":"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","sources":["webpack://ymrlk-code-blog/./apps/api/src/app/app.module.ts","webpack://ymrlk-code-blog/./apps/api/src/app/configs/configuration.ts","webpack://ymrlk-code-blog/./apps/api/src/app/decorators/roles.decorator.ts","webpack://ymrlk-code-blog/./apps/api/src/app/decorators/skip-jwt-check.decorator.ts","webpack://ymrlk-code-blog/./apps/api/src/app/repositories/auth/auth.module.ts","webpack://ymrlk-code-blog/./apps/api/src/app/repositories/auth/controllers/auth.controller.ts","webpack://ymrlk-code-blog/./apps/api/src/app/repositories/auth/guards/jwt-auth.guard.ts","webpack://ymrlk-code-blog/./apps/api/src/app/repositories/auth/guards/jwt-refresh-auth.guard.ts","webpack://ymrlk-code-blog/./apps/api/src/app/repositories/auth/guards/local-auth.guard.ts","webpack://ymrlk-code-blog/./apps/api/src/app/repositories/auth/services/auth.service.ts","webpack://ymrlk-code-blog/./apps/api/src/app/repositories/auth/strategies/jwt-refresh-token.strategy.ts","webpack://ymrlk-code-blog/./apps/api/src/app/repositories/auth/strategies/jwt.strategy.ts","webpack://ymrlk-code-blog/./apps/api/src/app/repositories/auth/strategies/local.strategy.ts","webpack://ymrlk-code-blog/./apps/api/src/app/repositories/users/controllers/users/users.controller.ts","webpack://ymrlk-code-blog/./apps/api/src/app/repositories/users/schemas/user.schema.ts","webpack://ymrlk-code-blog/./apps/api/src/app/repositories/users/services/users.service.ts","webpack://ymrlk-code-blog/./apps/api/src/app/repositories/users/users.module.ts","webpack://ymrlk-code-blog/./apps/api/src/app/routes.ts","webpack://ymrlk-code-blog/./apps/api/src/app/shared/guards/roles.guard.ts","webpack://ymrlk-code-blog/./apps/api/src/app/shared/shared.module.ts","webpack://ymrlk-code-blog/./apps/api/src/environments/environment.prod.ts","webpack://ymrlk-code-blog/./libs/data/src/index.ts","webpack://ymrlk-code-blog/./libs/data/src/user/enum/role.enum.ts","webpack://ymrlk-code-blog/external commonjs \"@nestjs/common\"","webpack://ymrlk-code-blog/external commonjs \"@nestjs/config\"","webpack://ymrlk-code-blog/external commonjs \"@nestjs/core\"","webpack://ymrlk-code-blog/external commonjs \"@nestjs/jwt\"","webpack://ymrlk-code-blog/external commonjs \"@nestjs/mongoose\"","webpack://ymrlk-code-blog/external commonjs \"@nestjs/passport\"","webpack://ymrlk-code-blog/external commonjs \"@nestjs/serve-static\"","webpack://ymrlk-code-blog/external commonjs \"@nestjs/throttler\"","webpack://ymrlk-code-blog/external commonjs \"bcrypt\"","webpack://ymrlk-code-blog/external commonjs \"cookie-parser\"","webpack://ymrlk-code-blog/external commonjs \"helmet\"","webpack://ymrlk-code-blog/external commonjs \"mongoose\"","webpack://ymrlk-code-blog/external commonjs \"passport-jwt\"","webpack://ymrlk-code-blog/external commonjs \"passport-local\"","webpack://ymrlk-code-blog/external commonjs \"rand-token\"","webpack://ymrlk-code-blog/external commonjs \"tslib\"","webpack://ymrlk-code-blog/external commonjs \"uuid\"","webpack://ymrlk-code-blog/external node-commonjs \"path\"","webpack://ymrlk-code-blog/webpack/bootstrap","webpack://ymrlk-code-blog/./apps/api/src/main.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { APP_GUARD, RouterModule } from '@nestjs/core';\n\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { ServeStaticModule } from '@nestjs/serve-static';\n\nimport { join } from 'path';\n\nimport { AuthModule } from './repositories/auth/auth.module';\nimport { UsersModule } from './repositories/users/users.module';\nimport { JwtAuthGuard } from './repositories/auth/guards/jwt-auth.guard';\n\nimport { configuration, ConfigurationInterface } from './configs/configuration';\nimport { routes } from './routes';\nimport { SharedModule } from './shared/shared.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get<ConfigurationInterface>(\n          configuration.YMRLK_MONGODB_CONNECTION_STRING\n        ),\n        dbName: configService.get<ConfigurationInterface>(\n          configuration.YMRLK_MONGODB_DATABASE_NAME\n        ),\n        retryAttempts: configService.get<ConfigurationInterface>(\n          configuration.YMRLK_MONGODB_RETRY_ATTEMPTS\n        ),\n        retryDelay: configService.get<ConfigurationInterface>(\n          configuration.YMRLK_MONGODB_RETRY_DELAY\n        ),\n        user: configService.get<ConfigurationInterface>(\n          configuration.YMRLK_MONGODB_USER\n        ),\n        pass: configService.get<ConfigurationInterface>(\n          configuration.YMRLK_MONGODB_PASSWORD\n        ),\n      }),\n      inject: [ConfigService],\n    }),\n    ConfigModule.forRoot({\n      cache: true,\n      isGlobal: true,\n      envFilePath: '.env.development.local',\n    }),\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        ttl: configService.get(configuration.YMRLK_THROTTLE_TTL),\n        limit: configService.get(configuration.YMRLK_THROTTLE_LIMIT),\n      }),\n      inject: [ConfigService],\n    }),\n    RouterModule.register(routes),\n\n    // Custom\n    AuthModule,\n    UsersModule,\n    SharedModule,\n\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'client'),\n      exclude: ['/api*']\n    })\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n","export interface ConfigurationInterface {\n  YMRLK_MONGODB_CONNECTION_STRING: string;\n  YMRLK_MONGODB_DATABASE_NAME: string;\n  YMRLK_MONGODB_RETRY_ATTEMPTS: string;\n  YMRLK_MONGODB_RETRY_DELAY: string;\n  YMRLK_MONGODB_USER: string;\n  YMRLK_MONGODB_PASSWORD: string;\n  YMRLK_THROTTLE_TTL: string;\n  YMRLK_THROTTLE_LIMIT: string;\n  YMRLK_JWT_SECRET: string;\n  YMRLK_JWT_EXPIRES_IN: string;\n  YMRLK_REFRESH_TOKEN_SIZE: string;\n  YMRLK_REFRESH_TOKEN_EXPIRATION_DAYS: string;\n}\n\nexport const configuration: ConfigurationInterface = {\n  YMRLK_MONGODB_CONNECTION_STRING:      'YMRLK_MONGODB_CONNECTION_STRING',\n  YMRLK_MONGODB_DATABASE_NAME:           'YMRLK_MONGODB_DATABASE_NAME',\n  YMRLK_MONGODB_RETRY_ATTEMPTS:         'YMRLK_MONGODB_RETRY_ATTEMPTS',\n  YMRLK_MONGODB_RETRY_DELAY:            'YMRLK_MONGODB_RETRY_DELAY',\n  YMRLK_MONGODB_USER:                   'YMRLK_MONGODB_USER',\n  YMRLK_MONGODB_PASSWORD:               'YMRLK_MONGODB_PASSWORD',\n  YMRLK_THROTTLE_TTL:                   'YMRLK_THROTTLE_TTL',\n  YMRLK_THROTTLE_LIMIT:                 'YMRLK_THROTTLE_LIMIT',\n  YMRLK_JWT_SECRET:                     'YMRLK_JWT_SECRET',\n  YMRLK_JWT_EXPIRES_IN:                 'YMRLK_JWT_EXPIRES_IN',\n  YMRLK_REFRESH_TOKEN_EXPIRATION_DAYS:  'YMRLK_REFRESH_TOKEN_EXPIRATION_DAYS',\n  YMRLK_REFRESH_TOKEN_SIZE:             'YMRLK_REFRESH_TOKEN_SIZE'\n};\n","import { SetMetadata } from '@nestjs/common';\n\nimport { RoleEnum } from '@ymrlk-code-blog/data';\n\nexport const ROLES_KEY = 'roles';\nexport const Roles = (...roles: RoleEnum[]) => SetMetadata(ROLES_KEY, roles);\n","import { SetMetadata } from '@nestjs/common';\n\nexport const SKIP_JWT_CHECK = 'skipJwtCheck';\nexport const SkipJwtCheck = () => SetMetadata(SKIP_JWT_CHECK, true);\n","import { Module } from '@nestjs/common';\n\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { UsersModule } from '../users/users.module';\nimport { AuthService } from './services/auth.service';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtRefreshTokenStrategy } from './strategies/jwt-refresh-token.strategy';\n\nimport { AuthController } from './controllers/auth.controller';\nimport { configuration } from '../../configs/configuration';\n\n@Module({\n  controllers: [AuthController],\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get(configuration.YMRLK_JWT_SECRET),\n        signOptions: {\n          expiresIn: configService.get(configuration.YMRLK_JWT_EXPIRES_IN)\n        }\n      }),\n      inject: [ConfigService]\n    })\n  ],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n    JwtRefreshTokenStrategy\n  ],\n  exports: [AuthService]\n})\nexport class AuthModule {}\n","import { Controller, Post, UseGuards, Request, HttpCode } from '@nestjs/common';\n\nimport { LocalAuthGuard } from '../guards/local-auth.guard';\nimport { AuthService } from '../services/auth.service';\n\nimport { UserInterface } from '@ymrlk-code-blog/data';\n\nimport { AuthTokenRequestPayloadInterface } from '../interfaces/auth-token-request-payload.interface';\nimport { JwtRefreshAuthGuard } from '../guards/jwt-refresh-auth.guard';\nimport { SkipJwtCheck } from '../../../decorators/skip-jwt-check.decorator';\n\n\n@Controller()\nexport class AuthController {\n\n  constructor(private readonly authService: AuthService) { }\n\n  @HttpCode(200)\n  @SkipJwtCheck()\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  async login(@Request() request: any) {\n    const { userName, uuid } = (request.user._doc as UserInterface);\n    return this.authService.login({ user: { userName, sub: uuid } });\n  }\n\n  @HttpCode(200)\n  @SkipJwtCheck()\n  @UseGuards(JwtRefreshAuthGuard)\n  @Post('refresh')\n  async refreshToken(@Request() req: AuthTokenRequestPayloadInterface) {\n    return await this.authService.login(req);\n  }\n\n}\n","import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Reflector } from '@nestjs/core';\n\nimport { SKIP_JWT_CHECK } from '../../../decorators/skip-jwt-check.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const skipAuth = this.reflector.getAllAndOverride<boolean>(SKIP_JWT_CHECK, [\n      context.getHandler(),\n      context.getClass()\n    ]);\n\n    if (skipAuth) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n\n}\n","import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtRefreshAuthGuard extends AuthGuard('jwt-refresh') { }\n","import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') { }\n","import { Injectable } from '@nestjs/common';\n\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { compare } from 'bcrypt';\nimport { generate } from 'rand-token'\n\nimport { UsersService } from '../../users/services/users.service';\nimport { UserDocument } from '../../users/schemas/user.schema';\nimport { AuthTokenRequestPayloadInterface } from '../interfaces/auth-token-request-payload.interface';\nimport { AuthTokensInterface } from '../interfaces/auth-tokens.interface';\n\nimport { configuration } from '../../../configs/configuration';\n\n@Injectable()\nexport class AuthService {\n\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService\n  ) { }\n\n  async validateUser(email: string, password: string): Promise<UserDocument> {\n    const userDocument: UserDocument = await this.usersService.findOne(email);\n\n    if (!userDocument) {\n      return null;\n    }\n\n    const arePasswordsSame = await compare(password, userDocument.password);\n\n    if (userDocument && arePasswordsSame) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...result } = userDocument;\n      return result as UserDocument;\n    }\n  }\n\n  async login(loginPayload: AuthTokenRequestPayloadInterface): Promise<AuthTokensInterface> {\n    const { userName, sub } = loginPayload.user;\n    const payload = { userName, sub };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n      refreshToken: await this.generateRefreshToken(sub)\n    };\n  }\n\n  private async generateRefreshToken(userUUID: string): Promise<string> {\n    const refreshToken = generate(this.configService.get(configuration.YMRLK_REFRESH_TOKEN_SIZE));\n\n    // Production variant\n    const expirationDate = new Date();\n\n    expirationDate.setDate(\n      expirationDate.getDate() + +this.configService.get(configuration.YMRLK_REFRESH_TOKEN_EXPIRATION_DAYS)\n    );\n\n    // 3 Minutes for Testings\n    // const expirationDate = new Date();\n    // expirationDate.setMinutes(expirationDate.getMinutes() + 3);\n\n    await this.usersService.saveOrUpdateRefreshToken(userUUID, refreshToken, expirationDate);\n\n    return refreshToken;\n  }\n\n}\n","import { Injectable, Request, UnauthorizedException } from '@nestjs/common';\n\nimport { ConfigService } from '@nestjs/config';\n\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { UserInterface } from '@ymrlk-code-blog/data';\n\nimport { UsersService } from '../../users/services/users.service';\nimport { AuthValidationPayloadInterface } from '../interfaces/auth-validation-payload.interface';\nimport { UserDocument } from '../../users/schemas/user.schema';\nimport { configuration } from '../../../configs/configuration';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(Strategy, 'jwt-refresh') {\n\n  constructor(private configService: ConfigService, private usersService: UsersService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromBodyField('accessToken'),\n      ignoreExpiration: true,\n      secretOrKey: configService.get(configuration.YMRLK_JWT_SECRET),\n      passReqToCallback: true\n    });\n  }\n\n  async validate(request: Request, payload: AuthValidationPayloadInterface): Promise<AuthValidationPayloadInterface> {\n    const userDocument: UserDocument = await this.usersService.findByUUID(payload.sub);\n\n    if (!userDocument) {\n      throw new UnauthorizedException('No refresh token found');\n    }\n\n    if ((request.body as UserInterface).refreshToken != (await userDocument).refreshToken) {\n      throw new UnauthorizedException('Refresh token does not matched');\n    }\n\n    if (new Date() > new Date((await userDocument).refreshTokenExpiresIn)) {\n      throw new UnauthorizedException('Refresh token expired');\n    }\n\n    return { sub: payload.sub, userName: userDocument.userName };\n  }\n\n\n}\n","import { Injectable } from '@nestjs/common';\n\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\nimport { AuthValidationPayloadInterface } from '../interfaces/auth-validation-payload.interface';\nimport { configuration } from '../../../configs/configuration';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get(configuration.YMRLK_JWT_SECRET)\n    });\n  }\n\n  async validate(payload: AuthValidationPayloadInterface): Promise<AuthValidationPayloadInterface> {\n    return {sub: payload.sub, userName: payload.userName};\n  }\n}\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { ContextIdFactory, ModuleRef } from '@nestjs/core';\n\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\n\nimport { AuthService } from '../services/auth.service';\nimport { UserDocument } from '../../users/schemas/user.schema';\n\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n\n  constructor(private readonly moduleRef: ModuleRef) {\n    super({\n      usernameField: 'email',\n      passwordField: 'password',\n      passReqToCallback: true\n    });\n  }\n\n  async validate(request: Request, email: string, password: string): Promise<UserDocument> {\n    const contextId = ContextIdFactory.getByRequest(request);\n    const authService = await this.moduleRef.resolve(AuthService, contextId);\n\n    const userDocument = await authService.validateUser(email, password);\n\n    if (!userDocument) {\n      throw new HttpException('User was not found', HttpStatus.NOT_FOUND);\n    }\n\n    return userDocument;\n  }\n}\n","import { Body, Controller, Get, HttpCode,\n  HttpException, HttpStatus, Param, Post, Req, UseGuards\n} from '@nestjs/common';\n\nimport { RoleEnum, UserInterface } from '@ymrlk-code-blog/data';\n\nimport { SkipJwtCheck } from '../../../../decorators/skip-jwt-check.decorator';\nimport { UsersService } from '../../services/users.service';\nimport { UserDocument } from '../../schemas/user.schema';\nimport { Roles } from '../../../../decorators/roles.decorator';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\n\n@Controller()\nexport class UsersController {\n\n  constructor(private readonly usersService: UsersService) { }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Req() req) {\n    return req.user;\n  }\n\n  @Get('email/:email')\n  async getByEmail(@Param() email: { email: string }): Promise<UserDocument> {\n    const userDocument = await this.usersService.findByEmail(email.email);\n\n    if (!userDocument) {\n      throw new HttpException({\n        status: HttpStatus.NOT_FOUND,\n        error: `User with ${ email.email } email was not found`\n      }, HttpStatus.NOT_FOUND);\n    }\n\n    return userDocument;\n  }\n\n  @Get('uuid/:uuid')\n  async getByUUID(@Param() uuid: { uuid: string }): Promise<UserDocument> {\n    const userDocument = await this.usersService.findByUUID(uuid.uuid);\n\n    if (!userDocument) {\n      throw new HttpException({\n        status: HttpStatus.NOT_FOUND,\n        error: `User with ${ uuid.uuid } was not found`\n      }, HttpStatus.NOT_FOUND);\n    }\n\n    return userDocument;\n  }\n\n  @HttpCode(200)\n  @SkipJwtCheck()\n  @Post('register')\n  async createOne(@Body() model: UserInterface): Promise<UserDocument> {\n    const userDocument = await this.usersService.createOne(model);\n\n    if (userDocument) {\n      return userDocument;\n    } else {\n      throw new HttpException({\n        status: HttpStatus.BAD_REQUEST,\n        error: 'User already exist'\n      }, HttpStatus.BAD_REQUEST)\n    }\n  }\n\n  @HttpCode(200)\n  @Post('remove-user')\n  @Roles(RoleEnum.Admin)\n  addRole(@Body() uuid: { uuid: string }): any {\n    return uuid;\n  }\n\n}\n","import { Document } from 'mongoose';\nimport { Prop, raw, Schema, SchemaFactory } from '@nestjs/mongoose';\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class User {\n\n  @Prop({ type: String, maxlength: 50 })\n  userName: string;\n\n  @Prop({ type: String, maxlength: 50 })\n  firstName: string;\n\n  @Prop({ type: String, maxlength: 50 })\n  lastName: string;\n\n  @Prop({ type: String, maxlength: 250 })\n  shortBio: string;\n\n  @Prop(raw({\n    name: { type: String },\n    path: { type: String }\n  }))\n  avatar: Record<string, any>;\n\n  @Prop(raw({\n    url: { type: String },\n    prefix: { type: String }\n  }))\n  accountUrl: Record<string, any>;\n\n  @Prop({ type: String, required: true, unique: true })\n  email: string;\n\n  @Prop({ type: String, required: true })\n  password: string;\n\n  @Prop(raw({\n    country: { type: String },\n    city: { type: String }\n  }))\n  from: Record<string, any>;\n\n  @Prop({ type: [String], required: true })\n  roles: string[];\n\n  @Prop({ type: String, required: true, unique: true })\n  uuid: string;\n\n  @Prop({ type: String })\n  refreshToken: string;\n\n  @Prop({ type: Date })\n  refreshTokenExpiresIn: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n","import { Injectable } from '@nestjs/common';\n\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\nimport { UserInterface } from '@ymrlk-code-blog/data';\n\nimport { hash } from 'bcrypt';\nimport { v1 as uuidv1 } from 'uuid';\n\nimport { User, UserDocument } from '../schemas/user.schema';\n\n@Injectable()\nexport class UsersService {\n\n  constructor(@InjectModel(User.name) private userModel: Model<UserDocument>) { }\n\n  async findOne(email: string): Promise<UserDocument> {\n    const foundUserDocument = await this.userModel.findOne({ email }).exec();\n\n    if (!foundUserDocument) {\n      return null;\n    }\n\n    return foundUserDocument;\n  }\n\n  async findByEmail(email: string): Promise<UserDocument> {\n    const foundUserDocument = await this.userModel.findOne({ email }).select('-password').exec();\n\n    if (!foundUserDocument) {\n      return null;\n    }\n\n    return foundUserDocument;\n  }\n\n  async findByUUID(uuid: string): Promise<UserDocument> {\n    const foundUserDocument = await this.userModel.findOne({ uuid }).select('-password').exec();\n\n    if (!foundUserDocument) {\n      return null;\n    }\n\n    return foundUserDocument;\n  }\n\n  async createOne(model: UserInterface): Promise<any> {\n    const userExist = await this.findByEmail(model.email);\n\n    if (!userExist) {\n      return this.getCreatedDocument(model);\n    }\n\n    return false;\n  }\n\n  async saveOrUpdateRefreshToken(uuid: string, refreshToken: string, refreshTokenExpiresIn: Date): Promise<void> {\n    await this.userModel.findOneAndUpdate({ uuid }, {\n      refreshToken,\n      refreshTokenExpiresIn\n    });\n  }\n\n  private async getCreatedDocument(model): Promise<any> {\n\n    const modelCopy = {\n      ...model,\n      password: await this.hashPassword(model.password),\n      uuid: uuidv1()\n    };\n\n    const user = await new this.userModel(modelCopy).save();\n\n    if (user) {\n      return true;\n    }\n  }\n\n  private async hashPassword(password: string): Promise<string> {\n    return await hash(password, 10);\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { UsersService } from './services/users.service';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { SharedModule } from '../../shared/shared.module';\nimport { User, UserSchema } from './schemas/user.schema';\nimport { UsersController } from './controllers/users/users.controller';\n\n@Module({\n  controllers: [UsersController],\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    SharedModule\n  ],\n  providers: [UsersService],\n  exports: [UsersService]\n})\nexport class UsersModule {}\n","import { Routes } from '@nestjs/core';\n\nimport { AuthModule } from './repositories/auth/auth.module';\nimport { UsersModule } from './repositories/users/users.module';\n\nexport const routes: Routes = [\n  {\n    path: 'auth',\n    module: AuthModule\n  },\n  {\n    path: 'users',\n    module: UsersModule\n  }\n]\n","import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { RoleEnum } from '@ymrlk-code-blog/data';\n\nimport { ROLES_KEY } from '../../decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n\n  constructor(private readonly reflector: Reflector) { }\n\n  canActivate(context: ExecutionContext): boolean | Promise<boolean> {\n    const requiredRoles = this.reflector.getAllAndOverride<RoleEnum[]>(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role: RoleEnum) => user.roles?.includes(role));\n  }\n\n}\n","import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\n\nimport { RolesGuard } from './guards/roles.guard';\n\n@Module({\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard\n    }\n  ]\n})\nexport class SharedModule {}\n","export const environment = {\n  production: true,\n  server: {\n    host: 'https://ymrlk-code-blog.herokuapp.com',\n    port: process.env.PORT,\n    hostname: '0.0.0.0',\n    globalPrefix: 'api',\n    cors: { origin: 'https://ymrlk-code-blog.herokuapp.com' }\n  }\n};\n","// User exports\nexport * from './user/interfaces/user.interface';\nexport * from './user/enum/role.enum';\n","export enum RoleEnum {\n  Admin = 'admin',\n  Moderator = 'moderator',\n  User = 'user'\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"@nestjs/throttler\");","module.exports = require(\"bcrypt\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"helmet\");","module.exports = require(\"mongoose\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"passport-local\");","module.exports = require(\"rand-token\");","module.exports = require(\"tslib\");","module.exports = require(\"uuid\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport cookieParser from 'cookie-parser';\nimport helmet from 'helmet';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.setGlobalPrefix(environment.server.globalPrefix);\n\n  app.use(helmet());\n  app.use(cookieParser());\n\n  app.enableCors(\n    {\n      origin: environment.server.cors.origin,\n      credentials: true\n    }\n  );\n\n  await app.listen(environment.server.port, environment.server.hostname);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${environment.server.port}/${environment.server.globalPrefix}`\n  );\n}\n\nbootstrap().catch((error) => console.error('Server runs with error: ', error));\n"],"names":["AppModule","Module","imports","MongooseModule","forRootAsync","ConfigModule","useFactory","configService","uri","get","configuration","YMRLK_MONGODB_CONNECTION_STRING","dbName","YMRLK_MONGODB_DATABASE_NAME","retryAttempts","YMRLK_MONGODB_RETRY_ATTEMPTS","retryDelay","YMRLK_MONGODB_RETRY_DELAY","user","YMRLK_MONGODB_USER","pass","YMRLK_MONGODB_PASSWORD","inject","ConfigService","forRoot","cache","isGlobal","envFilePath","ThrottlerModule","ttl","YMRLK_THROTTLE_TTL","limit","YMRLK_THROTTLE_LIMIT","RouterModule","register","routes","AuthModule","UsersModule","SharedModule","ServeStaticModule","rootPath","join","__dirname","exclude","providers","provide","APP_GUARD","useClass","ThrottlerGuard","JwtAuthGuard","YMRLK_JWT_SECRET","YMRLK_JWT_EXPIRES_IN","YMRLK_REFRESH_TOKEN_EXPIRATION_DAYS","YMRLK_REFRESH_TOKEN_SIZE","ROLES_KEY","Roles","roles","SetMetadata","SKIP_JWT_CHECK","SkipJwtCheck","controllers","AuthController","PassportModule","JwtModule","registerAsync","secret","signOptions","expiresIn","AuthService","LocalStrategy","JwtStrategy","JwtRefreshTokenStrategy","exports","constructor","authService","login","request","userName","uuid","_doc","this","sub","refreshToken","req","HttpCode","UseGuards","LocalAuthGuard","Post","Request","JwtRefreshAuthGuard","AuthTokenRequestPayloadInterface","Controller","AuthGuard","reflector","super","canActivate","context","getAllAndOverride","getHandler","getClass","Injectable","Reflector","usersService","jwtService","validateUser","email","password","userDocument","findOne","arePasswordsSame","compare","loginPayload","payload","accessToken","sign","generateRefreshToken","userUUID","generate","expirationDate","Date","setDate","getDate","saveOrUpdateRefreshToken","UsersService","JwtService","PassportStrategy","Strategy","jwtFromRequest","ExtractJwt","fromBodyField","ignoreExpiration","secretOrKey","passReqToCallback","validate","findByUUID","UnauthorizedException","body","refreshTokenExpiresIn","fromAuthHeaderAsBearerToken","moduleRef","usernameField","passwordField","contextId","ContextIdFactory","getByRequest","resolve","HttpException","HttpStatus","NOT_FOUND","ModuleRef","UsersController","getProfile","getByEmail","findByEmail","status","error","getByUUID","createOne","model","BAD_REQUEST","addRole","Get","Req","Param","Promise","Body","UserInterface","RoleEnum","Admin","User","Prop","type","String","maxlength","raw","name","path","Record","url","prefix","required","unique","country","city","Schema","UserSchema","SchemaFactory","createForClass","userModel","exec","select","getCreatedDocument","findOneAndUpdate","modelCopy","hashPassword","save","hash","InjectModel","Model","forFeature","schema","module","RolesGuard","requiredRoles","switchToHttp","getRequest","some","role","includes","environment","production","server","host","port","process","env","PORT","hostname","globalPrefix","cors","origin","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","NestFactory","create","setGlobalPrefix","use","enableCors","credentials","listen","Logger","log","bootstrap","catch","console"],"sourceRoot":""}